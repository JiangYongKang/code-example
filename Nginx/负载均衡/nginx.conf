# Nginx 实现负载均衡 Load balancing
# 参考文档 http://nginx.org/en/docs/http/load_balancing.html

# 由于并不是真实环境，所以测试用的 vincent.com 只能在本地的 hosts 文件中做一下设置
# 127.0.0.1 vincent.com

http {
    # 轮询是默认的负载方案
    upstream vincent.com {
        server 127.0.0.1:3001;
        server 127.0.0.1:3002;
        server 127.0.0.1:3003;
    }

    # 最少连接数的负载方案，请求会被转发到连接数最少的服务器上
    # upstream vincent.com {
    #     least_conn;
    #     server 127.0.0.1:3001;
    #     server 127.0.0.1:3002;
    #     server 127.0.0.1:3003;
    # }

    # IP地址哈希负载方案
    # 前面的两种负载均衡方案中，同一客户端连续的Web请求可能会被分发到不同的后端服务器进行处理，因此如果涉及到会话Session，那么会话会比较复杂。
    # 常见的是基于数据库的会话持久化。要克服上面的难题，可以使用基于IP地址哈希的负载均衡方案。
    # 这样的话，由于同一客户端连续的Web请求的IP地址都是一样的，那么他们的哈希值也是一样的，都会被分发到同一服务器进行处理。
    # upstream vincent.com {
    #     ip_hash;
    #     server 127.0.0.1:3001;
    #     server 127.0.0.1:3002;
    #     server 127.0.0.1:3003;
    # }

    # 基于权重的负载方案
    # 基于权重的负载均衡即 Weighted Load Balancing。
    # 这种方式下，我们可以配置Nginx把请求更多地分发到高配置的后端服务器上，把相对较少的请求分发到低配服务器。
    # upstream vincent.com {
    #     server 127.0.0.1:3001 weight=1;
    #     server 127.0.0.1:3002 weight=2;
    #     server 127.0.0.1:3003 weight=3;
    # }

    server {
        listen 80;
        server_name vincent.com;
        location / {
            proxy_pass         http://vincent.com;
            proxy_set_header   Host            $host;
            proxy_set_header   X-Real-IP       $remote_addr;
            proxy_set_header   X-Forwarded-For $proxy_add_x_forwarded_for;
        }
    }
}